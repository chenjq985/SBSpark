Scala有一个十分强大的模式匹配机制，可以应用在很多场合：switch语句、类型查
询，以及“析构”（获取复杂表达式中的不同部分）。除此之外，Scala还提供了样例
类，对模式匹配进行了优化。

本章的要点包括：
1. match表达式（非语句）是一个更好的switch，不会有意外掉入到下一个分支的问题，所以每一句case语句后面不需要加上break。
2. 如果没有模式能够匹配，会抛出MatchError。可以用 case _ 模式来避免，即相当于default。
3. 模式可以包含一个随意定义的条件，称做守卫。
4. 你可以对表达式的类型进行匹配；优先选择模式匹配而不是isInstanceOf/asInstanceOf。
5. 你可以匹配数组、元组和样例类的模式，然后将匹配到的不同部分绑定到变量。
6. 在for表达式中，不能匹配的情况会被安静地跳过。
7. 样例类是编译器会为之自动产出模式匹配所需要的方法的类。
8. 样例类继承层级中的公共超类应该是sealed的。
9. 用Option来存放对于可能存在也可能不存在的值--这比null更安全。
变量必须以小写字母开头，如果是小写字母开头的常量，则需要被包括在反引号中。